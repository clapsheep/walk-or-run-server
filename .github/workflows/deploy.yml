name: Deploy to Docker Hub and Clapsheep Server

on:
  pull_request:
    branches: [ "main" ]
    types: [closed]
  push:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    name: Deploy to Clapsheep Server
    runs-on: ubuntu-latest
    environment: 
      name: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      if: github.event_name == 'push'
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@v1

    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2
      with:
        arguments: build --no-daemon --parallel
        gradle-home-cache-cleanup: true

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/running-server:latest
        platforms: linux/arm64/v8    # M1/M2 Mac 지원을 위해 추가

    - name: Deploy to Clapsheep Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.CLAPSHEEP_SERVER_HOST }}
        username: ${{ secrets.CLAPSHEEP_SERVER_USERNAME }}
        port: 2222
        debug: true
        key: ${{ secrets.SSH_PRIVATE_KEY }}    # | 문자 제거
        script: |
          cd /Users/clapsheep-server/docker-server/projects/running-project
          docker compose down --remove-orphans
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/running-server:latest
          docker compose up -d
          sleep 30
          
          if docker ps | grep -q running-mysql && docker ps | grep -q running-server; then
            echo "Deployment successful"
            exit 0
          else
            docker compose logs
            exit 1
          fi
